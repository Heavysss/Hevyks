while - создает цикл где если её условие верно то цикл повторяется

Пример:
pas1 = ('disk') 
pas2 = (input('Введите свой пароль '))

while pas1 != pas2:
     pas2 = input('Повторите попытку ')         
	
#Это означает что пока pas1 не равен pas2 цикл будет работать, 			когда же я введу pas2 и он будет совпадать с pas1 то цикл перестанет работать 		потому что переменная pas2 не будет иметь неправильное значение  pas2 = input('Повторите попытку ')

Break - эта команда принудительно останавливает цикл
Пример:
a = 1

while a < 1000:
    a += 1
    print(a)
    if a == 500:
        break
print("Получилось число " + str(a))

Continue - эта команда принудительно пропускает то условие которое будет описанно


Список - Это та же переменная только с большим количеством данных которыми можно манипулировать
Пример:
test = [1,2,3,4,5]

print(test[3]) #В случае со списком я пытаюсь вызвать цифру 4 а его индекс будет 3 так как индексация данных начинается с 0 и так далее 1,2,3,4

test = [1,2,3,[4,5,6]]  #Это называется список в списке

print(test[3][0]) # В этом случае я пытаюсь вызвать цифру 4 которая находится уже в списке для этого нужно указать индекс списка а уже после указать на индекс в этом списке на цифру 4(так как это новый список счёт индексов начинаются с начала тоесть с нуля)

Важно знать что список в списке берет себе лишь один индекс 
Пример:
test = [0,1,2,3,4,[5,6,7],8,9,10]

print(test[6]) #В этом случаем покажет цифру 8 так как список под индексом 5 [5,6,7] это отдельный список и его можно вызвать если изменить цифру 6 на 5, тогда покажет полный список под индексом 5  

Можно выводить буквы из типа данных СТРОКА 
Пример:
test1 = 'Hey'

print(test1[1]) В этом случае выведится бука Е так как указан её индекс

Список можно умножать 
Пример:
test2 = [0,1,2,3,4]

test2 *= 2
Результат:
test2 = [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]

Список можно дополнять новыми данными
Пример:
test = [0,1,2,3,4,[5,6,7]]

print(test + [8,9,10,11])

В списках можно проверять наличие значений
Пример:
test3 = ['Саня','Коля','Женя']

if 'Саня' in test3:
    print('Саня на связи')

В этой операции можно сделать инверсию тоесть
Пример:

test3 = ['Саня','Коля','Женя']

if 'Влад' not in test3:
    print('Не, такого у нас нет')

В этом случае даже когда значения строки 'Влад' нет в списке test3 оператор not выполнит задачу (Возможно звучать так: Если Влад не находится в test3 то делает то что указано по циклу)

append (метод а не операция) - в случае необходимости пополнить список переменной 
Пример:

test4 = []  #Можно создать список пустым а только потом заполнять его данными

test4.append("Hey")
test4.append(2+2)
test4.append([1,2,3,4])
Результат:
test4 = ['Hey', 4, [1, 2, 3, 4]]

len (Это функция не метод) - Эта функция показывает количество обьектов в списке
Пример:
test5 = [5,6,1,2,3,4,5,6,7]

print('В переменной test5 находится ' + str(len(test5)) +' обьектов')

Важно знать что если в списке находится ещё один список то он считается как один обьект
Пример:
test6 = [0,1,2,[3,4,5,6,7,8,9,10,11,12]]

print('В списке test6 находится ' + str(len(test6)) +' обьектов')
В итоге список test6 имеет 4 значения а не 13

remove (Это метод) - В случае необходимости можно удалить обьект из списка
Пример:
test7 = ['Alex','Braser','Relis']
test7.remove('Braser')

Результат:
test7 = ['Alex','Relis']
Важно знать что этот метод удаляет то значение которое передано в аргументе

insert(x, y) (Метод) - Этот метод позволяет указать на какую позицию в списке нужно добавить обьект и принимает он два аргумента это позиция индекса и само значение которое нужно вставить
Пример:

test8 = [0,1,2,4]
test8.insert(3,3)
test8.insert(0,-1)

print(test8)

Результат:

test8 = [-1, 0, 1, 2, 3, 4]

min (Функция) - Выявляет минимальное значение в списке
max (Функция) - Выявляет максимальное значение в списке
С целочисленными и дробными всё понятно но со строками непонятно(Скорее всего там делаются вычисления в Лексиграфическим сравнением(Пока не знаю для чего это вообще нужно))

count (Метод) - подсчет количества значений(повторов) в списке 
Пример:

foo = [1,1,1,1,1,2,2,3,3,3,5,5,5]

print(foo.count(1))

Результат:
В списке foo насчитало 5 одинаковых обьектов(Со строковыми данными так же)
Метод count нужен один аргумент. В этом аргументе нужно указывать название значения

reverse (Метод) - Не требует никаких аргументов(но требует пустные скобки), этот метод переворачивает список
Пример:

foo = [1,2,3,4,5,6]
print(foo)
foo.reverse()
print(foo)

Результат:
[1, 2, 3, 4, 5, 6]
[6, 5, 4, 3, 2, 1]




